searchState.loadedDescShard("reprol", 0, "幅優先探索 / Breadth First Search(BFS)\nデータ構造(data structure)\n出力時に便利な関数など\nZ-algorithm\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBFSの結果を保持する構造体．\n経路復元を行わない場合に用いる構造体．\n経路復元用の構造体． …\n始点から<code>v</code>へのコストを返す．\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBFSを用いて最短経路を計算する． …\n01-BFSを用いて最短経路を計算する． …\n01-BFSを用いて最短経路を計算する． …\nBFSを用いて最短経路を計算する． …\n始点から<code>end</code>までの経路を構築して返す．\n<code>v</code>の直前に通過する頂点を返す．\n始点．\nx \\in [l, r)の範囲を探索 …\n…\nダイクストラで最小コストを計算する V: …\nstart-&gt;vの最小コスト …\n…\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n頂点endへの最短経路を構築する …\n…\nDisjoint Set Union(Union-Find)\nポテンシャルつきDSU\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n…\n…\n…\n<code>cum.fold(l..r)</code>で [l, r)の区間積を計算する\nReturns the argument unchanged.\n[0, r)の累積積を取得する\nCalls <code>U::from(self)</code>.\n配列vの累積配列を計算する\n演算を指定して配列vの累積積を計算する\n2次元配列の累積積を管理するデータ構造\n要素(i, j)の値がf(i, …\n演算を指定して要素(i, j)の値がf(i, …\n<code>cum.fold(il..ir, jl..jr)</code>で [il, ir) \\times [jl, …\nReturns the argument unchanged.\n[0, i) \\times [0, j)の累積積を取得\nCalls <code>U::from(self)</code>.\n2次元配列の累積配列を計算する\n…\n<code>dst.fold(l..r)</code>で [l, r)の区間積を計算する\nReturns the argument unchanged.\ni番目の要素を取得する\nCalls <code>U::from(self)</code>.\nすべての連結成分を列挙する．\n要素<code>u</code>と<code>v</code>が同じ集合に属するかを判定する．\n連結成分の個数を返す．\n要素<code>v</code>が属する集合の代表元を返す．\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n要素<code>u</code>と<code>v</code>が属する集合を統合する．\n要素数<code>n</code>で初期化する．\n要素<code>v</code>が属する集合の要素数を返す．\n…\ni番目の要素にrhsを作用させる v[i] &lt;- op(v[i], …\n[l, r)の区間積を取得する\nReturns the argument unchanged.\n[0, r)の累積\nCalls <code>U::from(self)</code>.\n演算を引数で指定\n…\n<code>seg.act(l..r, f)</code>: 区間[l, r)にfを作用させる\nセグ木上の二分探索(min_left) rより前でf(v[l-1]…\nセグ木上の二分探索(max_right) l以降でf(v[r]…\n<code>seg.fold(l..r)</code>で区間[l, r)の区間積を求める\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nxとyが同じグループに属すか\n連結成分の個数\nxのrootのindexを返す\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n…\nxが属するグループの要素数\nすべての連結成分を列挙する．\n要素<code>u</code>と<code>v</code>が同じ集合に属するかを判定する．\n連結成分の個数を返す．\n要素<code>u</code>と<code>v</code>が同じ集合に属している場合に， …\n要素<code>v</code>が属する集合の代表元を返す．\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n要素<code>u</code>と<code>v</code>が属する集合を統合する． potental[u]…\n要素数<code>n</code>で初期化する．\n要素<code>v</code>に置かれたポテンシャルを返す．\n要素<code>v</code>が属する集合の要素数を返す．\n演算(群)<code>op</code>を明示的に渡して要素数<code>n</code>…\n…\nセグ木上の二分探索(min_left) rより前でf(v[l-1]…\nセグ木上の二分探索(max_right) l以降でf(v[r]…\n<code>seg.fold(l..r)</code>で区間[l, r)の区間積を求める\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nなんか遅い？\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n演算(モノイド)を引数で指定\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nイテレータをsep区切りで文字列に変換する\n配列をsep区切りで文字列に変換する\nLowLinkを用いて無向グラフの橋を検出する\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n辺(u, v)が橋かどうかを判定する …\n整数の桁数を計算する\n$\\lceil \\frac{x}{y} \\rceil$を計算する …\n$\\lfloor \\frac{x}{y} \\rfloor$を計算する\nNOTE: …\n約数を列挙する 返り値は昇順にソート済み\n約数を列挙する …\nNOTE: …\n素因数分解する\n法pにおける逆元を計算する\n$\\lfloor \\sqrt[3]{x} \\rfloor$\n$\\lfloor \\sqrt{x} \\rfloor$\n…\nNOTE: ソートされていない\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n法Pのもとで階乗や二項係数を計算する\n二項係数${}_n C_k$\n階乗$n!$\n階乗の逆数$1/n!$\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n$0!$から$n!$までの階乗を前計算する\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n繰り返し二乗法による冪乗の計算 NOTE: …\n法pのもとで冪乗を計算する\nn進法の整数を10進法に変換する\n10進法の非負整数をn進法に変換する …\n分母\nReturns the argument unchanged.\n浮動小数点数に変換する\nCalls <code>U::from(self)</code>.\n分子\nNxM行列を反時計回りに90度回転させる …\nNxM行列を時計回りに90度回転させる …\n転置行列を計算する\nLazySegmentTree用 値の区間加算を行う作用 …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLazySegmentTree用 値をセット(上書き)する作用 …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nモノイドに対する作用 …\n群 逆元を持つモノイド\n逆元$x^{-1}$を返す …\nモノイド …\n単位元$e$を返す 任意の$x$に対して，$x \\cdot …\n演算 $x \\cdot y$\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nランレングス圧縮(run-length encodeing) NOTE: …\nランレングス圧縮を行う\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\ncomponentsには各強連結成分がはいる …\n分解された連結成分の個数\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n連結成分idに含まれる要素数\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nトポロジカル順序が一意かどうか …\n…\n…\nトポロジカル順序\n…\nu-&gt;vの最小コスト\nReturns the argument unchanged.\nu-&gt;vの最短経路においてvの1個前の頂点 …\nCalls <code>U::from(self)</code>.\n…\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n文字列sに対して， z[i]: sとs[i..]…")