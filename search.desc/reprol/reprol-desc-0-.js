searchState.loadedDescShard("reprol", 0, "幅優先探索(Breadth First Search, BFS)\n二分探索(Binary Search)\nchange_min / change_max\nダイクストラ(Dijkstra)\nデータ構造(data structure)\n出力時に便利な関数など\n2次元グリッド(配列)に対する操作群\n転倒数(inversion number)\n二項演算(binary operations)など\nPermutation\nランレングス圧縮(run-length encoding)\n文字列アルゴリズム\nワーシャル・フロイド(Warshall Floyd)\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBFS(経路復元なし)\nBFSの本体．\nBFS(経路復元あり)\n…\n経路情報を管理するためのトレイト．\n経路を保存する場合に用いる構造体． …\n始点から<code>end</code>までの経路を構築する．\n始点から<code>v</code>へのコストを返す．\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>index</code>の直前の頂点を返す．\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBFSで最短経路を計算する．\n01-BFSで最短経路を計算する．\n始点から<code>end</code>までの経路を構築する．\n<code>v</code>の直前の頂点を返す．\n<code>index</code>の直前の頂点を<code>v</code>に更新する．\n始点．\n…\n…\n探索対象の整数の型．\n配列の要素の型．\n単調性のある関数<code>f</code>に対して， 範囲内の整数…\n<code>x</code>以上の最小の要素のインデックスを返す． …\n条件関数<code>f</code> に対して，<code>f(x)</code>が<code>Ordering::Less</code>…\n配列の要素<code>x</code>に対して，<code>f(x) &lt; k</code>…\n<code>x</code>…\n条件関数<code>f</code> に対して，<code>f(x) != Ordering::Greater</code>…\n配列の要素<code>x</code>に対して，<code>f(x) &lt;= k</code>…\n…\n<code>Option&lt;T&gt;</code>…\n<code>rhs</code>の値が<code>self</code>より大きい場合，<code>self</code>を<code>rhs</code>…\n<code>self</code>が<code>None</code>である場合，または，<code>self</code>が<code>Some(lhs)</code>…\n<code>rhs</code>の値が<code>self</code>より小さい場合，<code>self</code>を<code>rhs</code>…\n<code>self</code>が<code>None</code>である場合，または，<code>self</code>が<code>Some(lhs)</code>…\nダイクストラ(経路復元なし)\nダイクストラの本体．\nダイクストラ(経路復元あり)\n…\n経路情報を管理するためのトレイト．\n経路を保存する場合に用いる構造体． …\n始点から<code>end</code>までの経路を構築する．\n始点から<code>v</code>へのコストを返す．\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>index</code>の直前の頂点を返す．\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n始点から<code>end</code>までの経路を構築する．\n<code>v</code>の直前の頂点を返す．\n<code>index</code>の直前の頂点を<code>v</code>に更新する．\n始点．\nCartesian Tree\n累積積(累積和)\n2次元累積積(累積和)\nDisjoint Sparse Table\nDisjoint Set Union(Union-Find)\nFenwick Tree(Binary Indexed Tree)\nポテンシャルつきDSU\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n累積積を管理するデータ構造\n累積和\n<code>[l, r)</code>の区間積を返す．\nReturns the argument unchanged.\n累積配列の<code>r</code>番目の要素を返す(区間<code>[0, r)</code>…\nCalls <code>U::from(self)</code>.\n配列の累積配列を構築する．\n演算<code>op</code>…\n2次元累積積を管理するデータ構造\n2次元累積和\n区間<code>[il, ir) x [jl, jr)</code>の累積積を返す．\nReturns the argument unchanged.\n<code>[0, i) x [0, j)</code>の累積積を返す．\nCalls <code>U::from(self)</code>.\n2次元配列の累積配列を構築する．\n演算<code>op</code>…\n区間<code>[l, r)</code>の区間積を返す．\nReturns the argument unchanged.\n指定したindexの値を返す．\nCalls <code>U::from(self)</code>.\n配列<code>v</code>からDisjoint Sparse Tableを構築する．\n演算<code>op</code>を指定して，配列<code>v</code>からDisjoint Sparse …\nすべての連結成分を列挙する．\n要素<code>u</code>と<code>v</code>が同じ集合に属するかを判定する．\n連結成分の個数を返す．\n要素<code>v</code>が属する集合の代表元を返す．\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n要素<code>u</code>と<code>v</code>が属する集合を統合する．\n要素数<code>n</code>で初期化する．\n要素<code>v</code>が属する集合の要素数を返す．\nFenwick Tree\n区間<code>[l, r)</code>の区間積を返す．\nReturns the argument unchanged.\n<code>index</code>番目の要素の値を返す．\nCalls <code>U::from(self)</code>.\n長さ<code>n</code>で初期化する． …\n<code>index</code>番目の要素に<code>rhs</code>を作用させる． …\n<code>index</code>番目の要素の値を<code>value</code>にする．\n演算<code>op</code>を指定して長さ<code>n</code>で初期化する．\n…\n<code>seg.act(l..r, f)</code>: 区間[l, r)にfを作用させる\nセグ木上の二分探索(min_left) rより前でf(v[l-1]…\nセグ木上の二分探索(max_right) l以降でf(v[r]…\n<code>seg.fold(l..r)</code>で区間[l, r)の区間積を求める\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nxとyが同じグループに属すか\n連結成分の個数\nxのrootのindexを返す\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n…\nxが属するグループの要素数\nすべての連結成分を列挙する．\n要素<code>u</code>と<code>v</code>が同じ集合に属するかを判定する．\n連結成分の個数を返す．\n要素<code>u</code>と<code>v</code>が同じ集合に属している場合に， …\n要素<code>v</code>が属する集合の代表元を返す．\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n要素<code>u</code>と<code>v</code>が属する集合を統合する． potental[u]…\n要素数<code>n</code>で初期化する．\n要素<code>v</code>に置かれたポテンシャルを返す．\n要素<code>v</code>が属する集合の要素数を返す．\n演算(群)<code>op</code>を明示的に渡して要素数<code>n</code>…\n…\nセグ木上の二分探索(min_left) rより前でf(v[l-1]…\nセグ木上の二分探索(max_right) l以降でf(v[r]…\n<code>seg.fold(l..r)</code>で区間[l, r)の区間積を求める\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nなんか遅い？\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n演算(モノイド)を引数で指定\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLowLinkを用いて無向グラフの橋を検出する\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n辺(u, v)が橋かどうかを判定する …\ndigit\ndiv_ceil\ndiv_floor\n約数列挙(divisors enumerator)\n素因数分解(prime factorizaion)\n最大公約数(greatest common divisor)\n素数判定\n最小公倍数(least common multiple)\n線形篩(Linear Sieve)\nRadix\n約数を列挙する． …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n素因数分解する． …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n$\\lfloor \\sqrt[3]{x} \\rfloor$\n$\\lfloor \\sqrt{x} \\rfloor$\n…\n…\n<code>x</code>…\n<code>x</code>…\n<code>x</code>を素因数分解する． (素数, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>x</code>が素数かどうかを判定する．\n<code>x</code>の最小素因数(lpf)を返す．\n<code>n</code>までの線形篩を構築する．\n素数のイテレータを返す．\n法Pのもとで階乗や二項係数を計算する\n二項係数${}_n C_k$\n階乗$n!$\n階乗の逆数$1/n!$\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n$0!$から$n!$までの階乗を前計算する\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n繰り返し二乗法による冪乗の計算 NOTE: …\n基数<code>base</code>…\n非負整数を基数<code>base</code>…\n分母\nReturns the argument unchanged.\n浮動小数点数に変換する\nCalls <code>U::from(self)</code>.\n分子\nLazySegmentTree用 値の区間加算を行う作用 …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLazySegmentTree用 値をセット(上書き)する作用 …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nモノイドに対する作用 …\n群 逆元を持つモノイド\n逆元$x^{-1}$を返す …\nモノイド …\n単位元$e$を返す 任意の$x$に対して，$x \\cdot …\n演算 $x \\cdot y$\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\ncomponentsには各強連結成分がはいる …\n分解された連結成分の個数\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n連結成分idに含まれる要素数\nローリングハッシュ(Rolling Hash)\nSuffix Array\nZ algorithm\nReturns the argument unchanged.\n　文字列の区間<code>[l, r)</code>…\nCalls <code>U::from(self)</code>.\n文字列<code>s</code>…\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n文字列<code>s</code>に対して，配列<code>z</code>(長さ<code>|S|</code>…\n…\n…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nトポロジカル順序が一意かどうか …\nトポロジカル順序\nワーシャル・フロイド本体．\n頂点<code>u</code>から<code>v</code>へコスト<code>c</code>の有向辺を追加する． …\n頂点<code>u</code>から<code>v</code>へコスト<code>c</code>…\n全点間最短経路を計算する．\n頂点<code>u</code>から<code>v</code>への最小コストを返す． <code>build()</code>…\nReturns the argument unchanged.\n負の閉路が存在するかを判定する．\nCalls <code>U::from(self)</code>.")