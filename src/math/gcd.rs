pub trait Gcd {
    fn gcd(self, rhs: Self) -> Self;
}

pub trait Lcm: Gcd {
    fn lcm(self, rhs: Self) -> Self;
}

macro_rules! impl_signed {
    ($($ty:ident),*) => {$(
        impl Gcd for $ty {
            fn gcd(self, rhs: Self) -> Self {
                if rhs == 0 {
                    self.abs()
                } else {
                    rhs.gcd(self % rhs)
                }
            }
        }

        impl Lcm for $ty {
            fn lcm(self, rhs: Self) -> Self {
                let m = self.abs();
                let n = rhs.abs();
                if m == 0 || n == 0 {
                    return 0;
                } else {
                    m / self.gcd(rhs) * n
                }
            }
        }
    )*};
}

impl_signed! { i8, i16, i32, i64, i128, isize }

macro_rules! impl_unsigned {
    ($($ty:ident),*) => {$(
        impl Gcd for $ty {
            fn gcd(self, rhs: Self) -> Self {
                if rhs == 0 {
                    self
                } else {
                    Self::gcd(rhs, self % rhs)
                }
            }
        }

        impl Lcm for $ty {
            fn lcm(self, rhs: Self) -> Self {
                if self == 0 || rhs == 0 {
                    0
                } else {
                    self / self.gcd(rhs) * rhs
                }
            }
        }

    )*};
}

impl_unsigned! { u8, u16, u32, u64, u128, usize }

#[cfg(test)]
mod tests {
    use super::{Gcd, Lcm};

    #[test]
    fn test_gcd_i32() {
        let testcases: Vec<(i32, i32, i32)> = vec![
            (0, 0, 0),
            (55, 0, 55),
            (48, 18, 6),
            (54, 24, 6),
            (101, 103, 1),
            (0, 10, 10),
            (10, 0, 10),
            (48, 18, 6),
            (54, 24, 6),
            (42, 42, 42),
            (-48, -18, 6),
            (-54, 24, 6),
            (-101, -103, 1),
            (-42, -42, 42),
            (-553520529, -1197209986, 1),
            (540551869, 1840728616, 1),
            (1908219250, -425407391, 1),
            (509040292, 57610230, 2),
            (-1175743, 863363892, 1),
            (1030682953, 713241972, 1),
            (-1952738426, -444868397, 1),
            (-1190361003, -1401410658, 3),
            (1825167094, -100985106, 2),
            (-338164223, -1981524567, 1),
        ];
        for &(x, y, ans) in &testcases {
            assert_eq!(x.gcd(y), ans);
        }
    }

    #[test]
    fn test_gcd_u32() {
        let testcases: Vec<(u32, u32, u32)> = vec![
            (3106312921, 3453216366, 1),
            (3926578617, 3954465752, 1),
            (2505980391, 3406528687, 1),
            (2423778012, 3822572476, 4),
            (2917219236, 1391715291, 3),
            (536213819, 1109600266, 1),
            (2868206430, 478397803, 1),
            (1654786103, 3224039297, 1),
            (3298083185, 1690096037, 1),
            (37595066, 3306548580, 2),
        ];
        for &(x, y, ans) in &testcases {
            assert_eq!(x.gcd(y), ans);
        }
    }

    #[test]
    fn test_gcd_i64() {
        let testcases: Vec<(i64, i64, i64)> = vec![
            (-7359320707057902644, -6552810857364711647, 1),
            (905729105041378636, -2875869736246836725, 1),
            (8847070700217876836, 4631139478152483576, 4),
            (8016460018729025502, -2521122481601948305, 1),
            (-6227801812904253801, 4136795014664585392, 1),
            (3957933019027215470, -333365406113364589, 1),
            (-7597121186181759164, -6263631862945007953, 1),
            (-5338889392169988153, -9216016843508212313, 1),
            (-8489660990110051566, -6147875596777290523, 1),
            (-5551004925175289934, -8647799748584301441, 3),
        ];
        for &(x, y, ans) in &testcases {
            assert_eq!(x.gcd(y), ans);
        }
    }

    #[test]
    fn test_gcd_u64() {
        let testcases: Vec<(u64, u64, u64)> = vec![
            (17359742233317853495, 2643959224771992315, 5),
            (14386085941964695295, 1550468089565495025, 5),
            (408179090575346137, 15739249171817168003, 1),
            (8011442099917386412, 7038482920121905544, 4),
            (10931070166471004237, 3257433409529011374, 1),
            (3799476535477832801, 9811641311918688661, 1),
            (9260581597280282616, 6232070007492218880, 24),
            (17158962765808650752, 11801443467467210340, 28),
            (3145239905975089026, 8524459297996239250, 2),
            (5400548729038821887, 15221263237448695924, 1),
        ];
        for &(x, y, ans) in &testcases {
            assert_eq!(x.gcd(y), ans);
        }
    }

    #[test]
    fn test_gcd_u128() {
        let testcases = vec![(
            1_000_000_000_000_000_000u128,
            500_000_000_000_000_000u128,
            500_000_000_000_000_000u128,
        )];
        for &(x, y, ans) in &testcases {
            assert_eq!(x.gcd(y), ans);
        }
    }

    #[test]
    fn test_lcm_i32() {
        let testcases: Vec<(i32, i32, i32)> = vec![
            (0, 0, 0),
            (4, 5, 20),
            (6, 8, 24),
            (7, 3, 21),
            (10, 15, 30),
            (7, 3, 21),
            (9, 6, 18),
            (42, 42, 42),
            (-4, 5, 20),
            (-6, -8, 24),
            (-7, 3, 21),
            (-42, -42, 42),
            (-16934, 21456, 181667952),
            (4061, 17535, 71209635),
            (11413, 2035, 23225455),
            (-31924, 22969, 733262356),
            (-13923, -11930, 166101390),
            (27225, 15520, 84506400),
            (-6292, 12602, 39645892),
            (-26124, 11907, 14812308),
            (-5927, -12080, 71598160),
            (-19952, -7767, 154967184),
        ];
        for &(x, y, ans) in &testcases {
            assert_eq!(x.lcm(y), ans);
        }
    }

    #[test]
    fn test_lcm_u32() {
        let testcases: Vec<(u32, u32, u32)> = vec![
            (55588, 58619, 3258512972),
            (16754, 4840, 40544680),
            (42646, 55601, 2371160246),
            (680, 12245, 1665320),
            (29744, 54319, 1615664336),
            (7166, 97, 695102),
            (64940, 56997, 3701385180),
            (27627, 29698, 820466646),
            (36, 7561, 272196),
            (25830, 105, 25830),
        ];
        for &(x, y, ans) in &testcases {
            assert_eq!(x.lcm(y), ans);
        }
    }

    #[test]
    fn test_lcm_i64() {
        let testcases: Vec<(i64, i64, i64)> = vec![
            (-911109363, -1438277576, 1310428166086544088),
            (997225435, 358789037, 357793553495556095),
            (26741635, 240717441, 6437177945356035),
            (-1457667356, -703823896, 256485279392984744),
            (1378948502, -845876056, 583209760149434056),
            (-1072982164, -1090648114, 585122986761119348),
            (977756016, -924190295, 903632620865064720),
            (-1850903376, 762747108, 117647599769286384),
            (-1182472694, -1292792927, 1528692335173835338),
            (709683584, 2087677753, 1481590629986106752),
        ];
        for &(x, y, ans) in &testcases {
            assert_eq!(x.lcm(y), ans);
        }
    }

    #[test]
    fn test_lcm_u64() {
        let testcases: Vec<(u64, u64, u64)> = vec![
            (3027432665, 1513423987, 4581789214238335355),
            (2665804008, 2232814756, 1488061631416585512),
            (1710573362, 260947066, 223184549995827946),
            (1275680950, 3665156522, 2337785176941827950),
            (2256591705, 190081676, 428936733334097580),
            (4113355846, 3617149130, 7439310759869656990),
            (1020861211, 3845826640, 3926055241006461040),
            (1643613622, 725049328, 595850476061373008),
            (3218938301, 2318050956, 7461663005938065756),
            (2261736816, 885157517, 2001993344158045872),
        ];
        for &(x, y, ans) in &testcases {
            assert_eq!(x.lcm(y), ans);
        }
    }

    #[test]
    fn test_lcm_u128() {
        let testcases = vec![(
            1_000_000_000_000_000_000u128,
            500_000_000_000_000_000u128,
            1_000_000_000_000_000_000u128,
        )];
        for &(x, y, ans) in &testcases {
            assert_eq!(x.lcm(y), ans);
        }
    }
}
